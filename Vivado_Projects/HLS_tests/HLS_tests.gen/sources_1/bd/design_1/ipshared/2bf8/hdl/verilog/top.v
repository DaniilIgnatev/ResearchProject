// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.479000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=25,HLS_SYN_LUT=254,HLS_VERSION=2023_2}" *)

module top (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_SPI_TI,
        out_SPI_D,
        out_SPI_DS,
        out_TI
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] in_SPI_TI;
output  [7:0] out_SPI_D;
output  [0:0] out_SPI_DS;
output  [0:0] out_TI;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] out_TI;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] led_byte_i_1_fu_188_p3;
reg   [7:0] led_byte_i_1_reg_212;
wire    ap_CS_fsm_state2;
wire    grp_transmit_fu_95_ap_start;
wire    grp_transmit_fu_95_ap_done;
wire    grp_transmit_fu_95_ap_idle;
wire    grp_transmit_fu_95_ap_ready;
wire   [7:0] grp_transmit_fu_95_out_SPI_D;
wire    grp_transmit_fu_95_out_SPI_D_ap_vld;
wire   [0:0] grp_transmit_fu_95_out_SPI_DS;
wire    grp_transmit_fu_95_out_SPI_DS_ap_vld;
reg    grp_transmit_fu_95_ap_start_reg;
wire   [0:0] icmp_ln14_fu_114_p2;
wire    ap_CS_fsm_state3;
reg   [3:0] byte_i_fu_76;
wire   [3:0] byte_i_2_fu_120_p2;
reg   [0:0] out_TI_preg;
wire   [1:0] LED_i_fu_140_p6;
wire   [24:0] LED_i_fu_140_p7;
wire   [1:0] led_byte_id_fu_126_p1;
wire   [4:0] shl_ln_fu_160_p3;
wire   [31:0] zext_ln15_fu_156_p1;
wire   [31:0] zext_ln18_fu_168_p1;
wire   [31:0] lshr_ln18_fu_172_p2;
wire   [0:0] icmp_ln20_fu_182_p2;
wire   [7:0] led_byte_i_fu_178_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire   [1:0] LED_i_fu_140_p1;
wire   [1:0] LED_i_fu_140_p3;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_transmit_fu_95_ap_start_reg = 1'b0;
#0 byte_i_fu_76 = 4'd0;
#0 out_TI_preg = 1'd0;
end

top_transmit grp_transmit_fu_95(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_transmit_fu_95_ap_start),
    .ap_done(grp_transmit_fu_95_ap_done),
    .ap_idle(grp_transmit_fu_95_ap_idle),
    .ap_ready(grp_transmit_fu_95_ap_ready),
    .in_SPI_TI_val(in_SPI_TI),
    .out_SPI_D(grp_transmit_fu_95_out_SPI_D),
    .out_SPI_D_ap_vld(grp_transmit_fu_95_out_SPI_D_ap_vld),
    .out_SPI_DS(grp_transmit_fu_95_out_SPI_DS),
    .out_SPI_DS_ap_vld(grp_transmit_fu_95_out_SPI_DS_ap_vld),
    .data(led_byte_i_1_reg_212)
);

top_sparsemux_5_2_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 25 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 25 ),
    .def_WIDTH( 25 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 25 ))
sparsemux_5_2_25_1_1_U5(
    .din0(25'd16777231),
    .din1(25'd65551),
    .def(25'd271),
    .sel(LED_i_fu_140_p6),
    .dout(LED_i_fu_140_p7)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_transmit_fu_95_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln14_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_transmit_fu_95_ap_start_reg <= 1'b1;
        end else if ((grp_transmit_fu_95_ap_ready == 1'b1)) begin
            grp_transmit_fu_95_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_TI_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            out_TI_preg <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        byte_i_fu_76 <= 4'd0;
    end else if (((icmp_ln14_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        byte_i_fu_76 <= byte_i_2_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        led_byte_i_1_reg_212 <= led_byte_i_1_fu_188_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_transmit_fu_95_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_TI = 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_TI = 1'd1;
    end else begin
        out_TI = out_TI_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln14_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_transmit_fu_95_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LED_i_fu_140_p6 = {{byte_i_fu_76[3:2]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign byte_i_2_fu_120_p2 = (byte_i_fu_76 + 4'd1);

assign grp_transmit_fu_95_ap_start = grp_transmit_fu_95_ap_start_reg;

assign icmp_ln14_fu_114_p2 = ((byte_i_fu_76 == 4'd12) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_182_p2 = ((led_byte_id_fu_126_p1 == 2'd0) ? 1'b1 : 1'b0);

assign led_byte_i_1_fu_188_p3 = ((icmp_ln20_fu_182_p2[0:0] == 1'b1) ? 8'd229 : led_byte_i_fu_178_p1);

assign led_byte_i_fu_178_p1 = lshr_ln18_fu_172_p2[7:0];

assign led_byte_id_fu_126_p1 = byte_i_fu_76[1:0];

assign lshr_ln18_fu_172_p2 = zext_ln15_fu_156_p1 >> zext_ln18_fu_168_p1;

assign out_SPI_D = grp_transmit_fu_95_out_SPI_D;

assign out_SPI_DS = grp_transmit_fu_95_out_SPI_DS;

assign shl_ln_fu_160_p3 = {{led_byte_id_fu_126_p1}, {3'd0}};

assign zext_ln15_fu_156_p1 = LED_i_fu_140_p7;

assign zext_ln18_fu_168_p1 = shl_ln_fu_160_p3;

endmodule //top
