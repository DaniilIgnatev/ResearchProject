// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module SK9822_transmit_fullcolors (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_SPI_D,
        out_SPI_D_ap_vld,
        out_SPI_DS,
        out_SPI_DS_ap_vld,
        in_GBCR_INSEL_val,
        in_GBCR_GB_val,
        in_LEDs_val
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] out_SPI_D;
output   out_SPI_D_ap_vld;
output  [0:0] out_SPI_DS;
output   out_SPI_DS_ap_vld;
input  [0:0] in_GBCR_INSEL_val;
input  [4:0] in_GBCR_GB_val;
input  [31:0] in_LEDs_val;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] conv9_fu_93_p1;
reg   [7:0] conv9_reg_201;
wire   [7:0] led_byte_i_fu_138_p1;
reg   [7:0] led_byte_i_reg_209;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln18_fu_142_p2;
reg   [0:0] icmp_ln18_reg_214;
wire   [7:0] led_byte_i_1_fu_148_p3;
reg   [7:0] led_byte_i_1_reg_219;
wire   [7:0] led_byte_i_3_fu_177_p3;
reg   [7:0] led_byte_i_3_reg_225;
wire    ap_CS_fsm_state3;
wire    grp_transmit_byte_fu_72_ap_start;
wire    grp_transmit_byte_fu_72_ap_done;
wire    grp_transmit_byte_fu_72_ap_idle;
wire    grp_transmit_byte_fu_72_ap_ready;
wire   [7:0] grp_transmit_byte_fu_72_out_SPI_D;
wire    grp_transmit_byte_fu_72_out_SPI_D_ap_vld;
wire   [0:0] grp_transmit_byte_fu_72_out_SPI_DS;
wire    grp_transmit_byte_fu_72_out_SPI_DS_ap_vld;
reg    grp_transmit_byte_fu_72_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [2:0] led_byte_id_fu_50;
wire   [2:0] byte_i_fu_111_p2;
wire   [0:0] icmp_ln9_fu_105_p2;
wire   [1:0] trunc_ln16_fu_117_p1;
wire   [4:0] shl_ln_fu_121_p3;
wire   [31:0] zext_ln16_fu_129_p1;
wire   [31:0] lshr_ln16_fu_133_p2;
wire   [0:0] icmp_ln22_fu_159_p2;
wire   [7:0] or_ln25_fu_164_p2;
wire   [7:0] led_byte_i_2_fu_169_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_transmit_byte_fu_72_ap_start_reg = 1'b0;
#0 led_byte_id_fu_50 = 3'd0;
end

SK9822_transmit_byte grp_transmit_byte_fu_72(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_transmit_byte_fu_72_ap_start),
    .ap_done(grp_transmit_byte_fu_72_ap_done),
    .ap_idle(grp_transmit_byte_fu_72_ap_idle),
    .ap_ready(grp_transmit_byte_fu_72_ap_ready),
    .out_SPI_D(grp_transmit_byte_fu_72_out_SPI_D),
    .out_SPI_D_ap_vld(grp_transmit_byte_fu_72_out_SPI_D_ap_vld),
    .out_SPI_DS(grp_transmit_byte_fu_72_out_SPI_DS),
    .out_SPI_DS_ap_vld(grp_transmit_byte_fu_72_out_SPI_DS_ap_vld),
    .data(led_byte_i_3_reg_225)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_transmit_byte_fu_72_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_transmit_byte_fu_72_ap_start_reg <= 1'b1;
        end else if ((grp_transmit_byte_fu_72_ap_ready == 1'b1)) begin
            grp_transmit_byte_fu_72_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        led_byte_id_fu_50 <= 3'd0;
    end else if (((icmp_ln9_fu_105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        led_byte_id_fu_50 <= byte_i_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        conv9_reg_201[4 : 0] <= conv9_fu_93_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln18_reg_214 <= icmp_ln18_fu_142_p2;
        led_byte_i_1_reg_219 <= led_byte_i_1_fu_148_p3;
        led_byte_i_reg_209 <= led_byte_i_fu_138_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        led_byte_i_3_reg_225 <= led_byte_i_3_fu_177_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_transmit_byte_fu_72_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_transmit_byte_fu_72_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign byte_i_fu_111_p2 = (led_byte_id_fu_50 + 3'd1);

assign conv9_fu_93_p1 = in_GBCR_GB_val;

assign grp_transmit_byte_fu_72_ap_start = grp_transmit_byte_fu_72_ap_start_reg;

assign icmp_ln18_fu_142_p2 = ((led_byte_id_fu_50 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_159_p2 = ((led_byte_i_1_reg_219 > 8'd8) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_105_p2 = ((led_byte_id_fu_50 == 3'd4) ? 1'b1 : 1'b0);

assign led_byte_i_1_fu_148_p3 = ((in_GBCR_INSEL_val[0:0] == 1'b1) ? led_byte_i_fu_138_p1 : conv9_reg_201);

assign led_byte_i_2_fu_169_p3 = ((icmp_ln22_fu_159_p2[0:0] == 1'b1) ? 8'd232 : or_ln25_fu_164_p2);

assign led_byte_i_3_fu_177_p3 = ((icmp_ln18_reg_214[0:0] == 1'b1) ? led_byte_i_2_fu_169_p3 : led_byte_i_reg_209);

assign led_byte_i_fu_138_p1 = lshr_ln16_fu_133_p2[7:0];

assign lshr_ln16_fu_133_p2 = in_LEDs_val >> zext_ln16_fu_129_p1;

assign or_ln25_fu_164_p2 = (led_byte_i_1_reg_219 | 8'd224);

assign out_SPI_D = grp_transmit_byte_fu_72_out_SPI_D;

assign out_SPI_DS = grp_transmit_byte_fu_72_out_SPI_DS;

assign out_SPI_DS_ap_vld = grp_transmit_byte_fu_72_out_SPI_DS_ap_vld;

assign out_SPI_D_ap_vld = grp_transmit_byte_fu_72_out_SPI_D_ap_vld;

assign shl_ln_fu_121_p3 = {{trunc_ln16_fu_117_p1}, {3'd0}};

assign trunc_ln16_fu_117_p1 = led_byte_id_fu_50[1:0];

assign zext_ln16_fu_129_p1 = shl_ln_fu_121_p3;

always @ (posedge ap_clk) begin
    conv9_reg_201[7:5] <= 3'b000;
end

endmodule //SK9822_transmit_fullcolors
